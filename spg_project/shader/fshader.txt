#version 410 core
out vec4 FragColor;

#define NR_LIGHTS 2
in VS_OUT {
    vec3 FragPos;
    vec3 Normal;
    vec2 TexCoords;
    vec4 FragPosLightSpace[NR_LIGHTS];
	mat3 TBN;
} fs_in;

uniform vec3 objectColor;
uniform vec3 lightColor;
uniform vec3 lightPos;  
uniform vec3 viewPos;
uniform float normalLevel;

float specularStrength = 0.5;
float ambientStrength = 0.1;
vec3 viewPosCorrection;

struct Material {
    vec3 ambient;
    sampler2D diffuse;    
    sampler2D specular;  
    sampler2D normal;
    float shininess;
}; 
  
uniform Material material;

struct Light {
    vec3 position;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform Light light[NR_LIGHTS];

uniform sampler2D shadowMap[NR_LIGHTS];

float ShadowCalculation(vec4 fragPosLightSpace, float bias, int i)
{
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
	projCoords = projCoords * 0.5 + 0.5; 
	float closestDepth = texture(shadowMap[i], projCoords.xy).r;   
	float currentDepth = projCoords.z;  
	float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;   
	return shadow;
}

void main()
{    
    vec3 color = texture(material.diffuse, fs_in.TexCoords).rgb;
	
    //vec3 normal = normalize(fs_in.Normal);
	// obtain normal from normal map in range [0,1]
	vec3 normal = texture(material.normal, fs_in.TexCoords).rgb;
    // transform normal vector to range [-1,1]
    normal = normalize(normal * 2.0 - 1.0);  
	
	normal.xy *= normalLevel;
	normal = normalize(normal);
	
	// ambient
    vec3 ambient = 0.15 * color;
	vec3 lighting;
	for(int i = 0; i < NR_LIGHTS; i++){
	
		// diffuse
		vec3 lightDir = fs_in.TBN * normalize(light[i].position - fs_in.FragPos);
		float diff = max(dot(lightDir, normal), 0.0);
		vec3 diffuse = light[i].diffuse * diff * vec3(texture(material.diffuse, fs_in.TexCoords));  
		
		// specular
		viewPosCorrection = -viewPos;	
		vec3 viewDir = fs_in.TBN * normalize(viewPosCorrection - fs_in.FragPos);	
		float spec = 0.0;
		vec3 halfwayDir = normalize(lightDir + viewDir);  
		spec = pow(max(dot(normal, halfwayDir), 0.0), 64.0);        
		vec3 specular = spec * light[i].specular * vec3(texture(material.specular, fs_in.TexCoords));
		
		// shadow
		float bias = max(0.005 * (1.0 - dot(normal, lightDir)), 0.0005);  
		float shadow = ShadowCalculation(fs_in.FragPosLightSpace[i], bias, i);       
		lighting += (ambient + (1.0 - shadow) * (diffuse + specular)) * color;  
	}	
    FragColor = vec4(lighting, 1.0);
}